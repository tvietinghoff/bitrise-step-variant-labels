#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  bitrise-step-variant-labels
summary: |
  Extracts labels from PR and derives build variants to build from it
description: |
  When merging a PR, this step evaluates the labels on the github PR and generates a list of Android gradle build variants based on the labels set. Multiple flavor dimensions can be set. The labels to recognize are configured in the step.
website: https://github.com/tvietinghoff/bitrise-step-variant-labels
source_code_url: https://github.com/tvietinghoff/bitrise-step-variant-labels
support_url: https://github.com/tvietinghoff/bitrise-step-variant-labels/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
#   - ios
#   - macos
   - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - utility

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ""

deps:
  brew:
  - name: git
  - name: wget
  apt_get:
  - name: git
  - name: wget


toolkit:
  go:
    package_name: github.com/tvietinghoff/bitrise-step-variant-labels


inputs:
  - provider:
    opts:
      title: "git provider"
      summary: Provider of the git repository.
      description: |
        Provider of the git repository. Can be "github" or "gitlab". Default is github.
  - repo_owner: $GITHUB_REPO_OWNER
    opts:
      title: "github repo owner"
      summary: Owner of the github repo.
      description: |
        Owner of the github repo. Required if provider is github.

      is_expand: true
      is_required: false
  - repo_name: $GITHUB_REPO_NAME
    opts:
      title: "github repo name"
      summary: Name of the github repo.
      description: |
        Name of the github repo. Required if provider is github.

      is_expand: true
      is_required: false
  - project_path: $GITLAB_PROJECT_PATH
    opts:
      title: "Gitlab project path"
      description: |
        Full path of the gitlab project. Required if provider is gitlab.
      is_expand: true
      is_required: false

  - auth_token: $GIT_AUTH_TOKEN
    opts:
      title: "github / gitlab auth token"
      summary: Github / Gitlab authentication token with access to the repo.
      description: |
        A github / gitlab API authentication token with sufficient rights to the repo to extract pull request information.

      is_expand: true
      is_required: true
      is_sensitive: true
  - pull_request: $PULL_REQUEST_ID
    opts:
      title: "pull request id"
      summary: Number of the pull request to inspect for labels.
      description: |
        The PR must have the labels configured or defaults must be set in the step configuration or the build will fail.
        Either this or *commit hash* must be specified, otherwise the default flavors will be built only. If *pull request*
        is specified, it takes precedence.

      is_expand: true
      is_required: false
  - commit_hash: $BITRISE_GIT_COMMIT
    opts:
      title: "commit hash"
      summary: Commit hash of the commit merging the PR.
      description: |
        The PR must have the labels configured or defaults must be set in the step configuration or the build will fail.
        Either this or *pull request* must be specified, otherwise the default flavors will be built only. If *pull request*
        is specified, it takes precedence.

      is_expand: true
      is_required: false
  - variant_labels:
    opts:
      title: "variant labels"
      summary: The labels to use for generating the variant names
      description: |
        Variant labels is a comma-separated list of label names that will designate variants to build. Multiple flavor
        dimensions can be specified by separating a flavor list with "|". Prefixing a label name with "!" will select
        it as the flavor of the respective dimension if no labels for that dimension are set at the PR. There can be
        only one default flavor per dimension.
        A label can optionally be associated with the flavor name to use instead of the label name by appending "={flavorName}"
        to the label name: "trial=demo". In this case, when the label "trial" is set on the PR, the "demo" flavor will be selected.

        Example
        full,demo   -> looks for the labels full and demo and selects either one as a build flavor. If none is set, the step fails

        full,!demo -> looks for the labels full and demo and selects either one as a build flavor. If none is set, demo will be selected

        full,!demo|orange,blue,!teal -> two dimensions. With a label set of "blue" and "orange" this will select the flavor
        combinations "demo+blue", "demo+orange"

        NB: although this is targeted for selecting flavors, it can just as well be applied to build types.

      is_expand: true
      is_required: true
  - variant_patterns:
    opts:
      title: "variant patterns"
      summary: A list of pattern specifications used to build environment variables, separated by `|`
      description: |
        A pattern specification is a pair of the environment variable to set and a pattern to generate the value from:
        `{key}={pattern}[;{separator}]`

        The pattern should include one placeholder "#n" for the selected flavor of the n-th dimension.
        Specifying a sepatator is optional. The default separator is space.

        Example:
        `VARIANTS=#1Release`  -> with selected flavors full and demo, this exports the environment variable `VARIANTS`
        with the Value `fullRelease demoRelease`

        `GRADLE_TASK=assemble#1#2Release;,` -> with selected flavors full of dimension 1 and blue / orange of dimension 2,
        this exports the environment variable `GRADLE_TASK` with the value `assembleFullBlueRelease,assembleFullOrangeRelease`
        (camelCasing the variant names is done automatically)

        `VARIANTS=#1Release` -> with flavor label specification `trial=demo,full` and PR label `trial` set, this
        exports the environment variable `VARIANTS` withe the value `demoRelease`

        The dimension index is one-based and determined by the order of the dimension in the variant_labels specification.

      is_expand: true
      is_required: true
  - export_description:
    opts:
      title: "PR description export"
      description: |
        Export the pull request description to a file so it can be included e.g. in the version notes. Expects the path
        to the file to export the description to. The file can have .html or .txt extension, which will determine which
        description format is stored. If no extension is given, both formats will be exported by appending .html and .txt
        to the path respectively.

      is_expand: true
      is_required: false
  - labels2env:
    opts:
      title: "Set environment variables based on PR labels"
      description: |
        Matches labels with environment label specifications, e.g. "skip_build,dist_*=distribute" and generates environment
        variables thereof.

        Label specification types:
        `some_label`: If "some_label" is set in labels, generates an environment variable `some_label` with the content
        	`some_label`

        `prefix_*`: If any label matching "prefix_*" is found, generates an environment variable with the name and content
        	of what the placeholder * represents.
        	Example: `dist_*`
        		When labels `dist_internal` and `dist_external` are set at the PR, this will create the following variables:
        		`internal=internal`
        		`external=external`

        `prefix_*=key`: If any label matching `prefix_*` is found, sets the environment variable named `key` with the
        	content being a comma-separated list of all values that were found represented by the * placeholder.
        	Example: `dist_*=distribute`
        		When labels `dist_internal` and `dist_external` are set at the PR, this will create the following variable:
        		`distribute=internal,external`

outputs:
  - VARIANTS:
    opts:
      title: "Build variants"
      summary: Space-separated list of generated build variant.
      description: |
        The list of the build variants generated by applying the variant pattern to the combination of flavors found as labels
        in the PR. This can be used as input for the gradle runner step in Bitrise.
